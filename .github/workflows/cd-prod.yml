name: Production Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy backend'
        required: true
        default: 'true'
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend'
        required: true
        default: 'true'
        type: boolean
      deploy_mobile:
        description: 'Deploy mobile apps'
        required: true
        default: 'false'
        type: boolean

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run backend tests
        run: cd backend && npm test

      - name: Run frontend tests
        run: cd frontend && npm test

      - name: Run integration tests
        run: npm run test:integration

  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --production

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'MedTranslate AI'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --suppression suppression.xml
            --failOnCVSS 7
            --enableRetired

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: reports

  deploy_backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [test, security_scan]
    if: ${{ github.event.inputs.deploy_backend != 'false' }}
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Install dependencies
        run: cd backend && npm ci

      - name: Build backend
        run: cd backend && npm run build

      - name: Deploy Lambda functions
        run: cd backend && npm run deploy:lambda -- --stage=production

      - name: Update API Gateway
        run: cd backend && npm run deploy:api -- --stage=production

      - name: Update DynamoDB tables
        run: cd backend && npm run deploy:dynamodb -- --stage=production

      - name: Run database migrations
        run: cd backend && npm run migrate -- --stage=production

      - name: Notify Slack on success
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Backend deployed to production successfully :rocket:'
          SLACK_TITLE: Backend Deployment
          SLACK_USERNAME: GitHub Actions

      - name: Notify Slack on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Backend deployment to production failed :x:'
          SLACK_TITLE: Backend Deployment
          SLACK_USERNAME: GitHub Actions

  deploy_frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [test, security_scan]
    if: ${{ github.event.inputs.deploy_frontend != 'false' }}
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Build frontend
        run: cd frontend && npm run build -- --env=production

      - name: Deploy to S3
        run: cd frontend && npm run deploy:s3 -- --stage=production

      - name: Invalidate CloudFront cache
        run: cd frontend && npm run deploy:cloudfront -- --stage=production

      - name: Notify Slack on success
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Frontend deployed to production successfully :rocket:'
          SLACK_TITLE: Frontend Deployment
          SLACK_USERNAME: GitHub Actions

      - name: Notify Slack on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Frontend deployment to production failed :x:'
          SLACK_TITLE: Frontend Deployment
          SLACK_USERNAME: GitHub Actions

  deploy_mobile:
    name: Deploy Mobile Apps
    runs-on: macos-latest
    needs: [test, security_scan]
    if: ${{ github.event.inputs.deploy_mobile == 'true' }}
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'
          bundler-cache: true

      - name: Install dependencies
        run: |
          cd frontend/mobile
          npm ci
          bundle install

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '13.4.1'

      - name: Setup Fastlane
        run: |
          cd frontend/mobile
          bundle install

      - name: Build and deploy iOS app
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        run: |
          cd frontend/mobile
          bundle exec fastlane ios release

      - name: Build and deploy Android app
        env:
          GOOGLE_PLAY_JSON_KEY: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          cd frontend/mobile
          bundle exec fastlane android release

      - name: Notify Slack on success
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Mobile apps deployed to production successfully :rocket:'
          SLACK_TITLE: Mobile Deployment
          SLACK_USERNAME: GitHub Actions

      - name: Notify Slack on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Mobile apps deployment to production failed :x:'
          SLACK_TITLE: Mobile Deployment
          SLACK_USERNAME: GitHub Actions

  tag_release:
    name: Tag Release
    runs-on: ubuntu-latest
    needs: [deploy_backend, deploy_frontend]
    if: ${{ success() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version from package.json
        id: package-version
        run: echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Create tag
        run: |
          git tag -a v${{ steps.package-version.outputs.version }} -m "Release v${{ steps.package-version.outputs.version }}"
          git push origin v${{ steps.package-version.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          name: Release v${{ steps.package-version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Slack on success
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Release v${{ steps.package-version.outputs.version }} tagged successfully :tada:'
          SLACK_TITLE: Release Tagged
          SLACK_USERNAME: GitHub Actions
