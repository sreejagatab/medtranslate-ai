/**
 * Session Summary Screen for MedTranslate AI Patient Application
 * 
 * This screen displays a summary of the translation session, including
 * key points, medical terms, and next steps.
 */

import React, { useContext, useEffect, useState } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  ScrollView, 
  TouchableOpacity,
  Share,
  ActivityIndicator
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';

import { TranslationContext } from '../context/TranslationContext';
import { EdgeConnectionContext } from '../context/EdgeConnectionContext';

export default function SessionSummaryScreen({ navigation, route }) {
  const { messages, sessionId, providerName, medicalContext, duration } = route.params;
  const { selectedLanguage } = useContext(TranslationContext);
  const { edgeConnection } = useContext(EdgeConnectionContext);
  
  const [loading, setLoading] = useState(true);
  const [summary, setSummary] = useState(null);
  const [error, setError] = useState(null);
  
  // Generate session summary on component mount
  useEffect(() => {
    generateSessionSummary();
  }, []);
  
  // Format duration in minutes and seconds
  const formatDuration = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}m ${remainingSeconds}s`;
  };
  
  // Generate session summary
  const generateSessionSummary = async () => {
    try {
      setLoading(true);
      
      // Extract conversation text
      const conversationText = messages
        .filter(msg => msg.sender === 'provider' || msg.sender === 'patient')
        .map(msg => `${msg.sender === 'provider' ? 'Provider' : 'Patient'}: ${msg.text}`)
        .join('\n');
      
      // Call API to generate summary
      const response = await fetch(`${edgeConnection.activeEndpoint}/summarize-session`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          sessionId,
          conversation: conversationText,
          language: selectedLanguage.code,
          medicalContext
        })
      });
      
      if (!response.ok) {
        throw new Error('Failed to generate session summary');
      }
      
      const data = await response.json();
      setSummary(data);
    } catch (error) {
      console.error('Error generating session summary:', error);
      setError('Unable to generate session summary. Please try again later.');
      
      // Fallback to basic summary
      setSummary({
        keyPoints: [
          'Conversation with healthcare provider',
          `Medical context: ${medicalContext || 'General'}`,
          `Session duration: ${formatDuration(duration)}`
        ],
        medicalTerms: extractMedicalTerms(),
        nextSteps: ['Follow up with your healthcare provider as needed']
      });
    } finally {
      setLoading(false);
    }
  };
  
  // Extract medical terms from messages
  const extractMedicalTerms = () => {
    const terms = [];
    
    messages.forEach(msg => {
      if (msg.medicalTerms) {
        terms.push(...msg.medicalTerms);
      }
    });
    
    return [...new Set(terms)]; // Remove duplicates
  };
  
  // Share session summary
  const shareSessionSummary = async () => {
    try {
      if (!summary) return;
      
      const shareText = `
Medical Session Summary

Provider: ${providerName || 'Healthcare Provider'}
Context: ${medicalContext || 'General Medical'}
Duration: ${formatDuration(duration)}

Key Points:
${summary.keyPoints.map(point => `• ${point}`).join('\n')}

${summary.medicalTerms.length > 0 ? `Medical Terms:
${summary.medicalTerms.map(term => `• ${term}`).join('\n')}

` : ''}
Next Steps:
${summary.nextSteps.map(step => `• ${step}`).join('\n')}

Generated by MedTranslate AI
      `;
      
      await Share.share({
        message: shareText,
        title: 'Medical Session Summary'
      });
    } catch (error) {
      console.error('Error sharing session summary:', error);
    }
  };
  
  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Session Summary</Text>
        <Text style={styles.subtitle}>
          {providerName || 'Healthcare Provider'} • {medicalContext || 'General Medical'}
        </Text>
      </View>
      
      {loading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#0077CC" />
          <Text style={styles.loadingText}>Generating your session summary...</Text>
        </View>
      ) : error ? (
        <View style={styles.errorContainer}>
          <Ionicons name="alert-circle-outline" size={48} color="#F44336" />
          <Text style={styles.errorText}>{error}</Text>
          <TouchableOpacity 
            style={styles.retryButton}
            onPress={generateSessionSummary}
          >
            <Text style={styles.retryButtonText}>Try Again</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <ScrollView style={styles.content}>
          <View style={styles.infoCard}>
            <View style={styles.infoRow}>
              <Ionicons name="time-outline" size={20} color="#666666" />
              <Text style={styles.infoText}>
                Duration: {formatDuration(duration)}
              </Text>
            </View>
            <View style={styles.infoRow}>
              <Ionicons name="chatbubble-outline" size={20} color="#666666" />
              <Text style={styles.infoText}>
                Messages: {messages.filter(msg => msg.sender === 'provider' || msg.sender === 'patient').length}
              </Text>
            </View>
            <View style={styles.infoRow}>
              <Ionicons name="language-outline" size={20} color="#666666" />
              <Text style={styles.infoText}>
                Language: {selectedLanguage.name}
              </Text>
            </View>
          </View>
          
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Key Points</Text>
            {summary.keyPoints.map((point, index) => (
              <View key={`point-${index}`} style={styles.bulletItem}>
                <View style={styles.bullet} />
                <Text style={styles.bulletText}>{point}</Text>
              </View>
            ))}
          </View>
          
          {summary.medicalTerms.length > 0 && (
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Medical Terms</Text>
              {summary.medicalTerms.map((term, index) => (
                <View key={`term-${index}`} style={styles.bulletItem}>
                  <View style={styles.bullet} />
                  <Text style={styles.bulletText}>{term}</Text>
                </View>
              ))}
            </View>
          )}
          
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Next Steps</Text>
            {summary.nextSteps.map((step, index) => (
              <View key={`step-${index}`} style={styles.bulletItem}>
                <View style={styles.bullet} />
                <Text style={styles.bulletText}>{step}</Text>
              </View>
            ))}
          </View>
        </ScrollView>
      )}
      
      <View style={styles.footer}>
        <TouchableOpacity 
          style={styles.shareButton}
          onPress={shareSessionSummary}
          disabled={loading || !!error}
        >
          <Ionicons name="share-outline" size={20} color="#FFFFFF" />
          <Text style={styles.shareButtonText}>Share Summary</Text>
        </TouchableOpacity>
        
        <TouchableOpacity 
          style={styles.doneButton}
          onPress={() => navigation.navigate('Home')}
        >
          <Text style={styles.doneButtonText}>Done</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  header: {
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#666666',
  },
  content: {
    flex: 1,
    padding: 20,
  },
  infoCard: {
    backgroundColor: '#F5F5F5',
    borderRadius: 8,
    padding: 16,
    marginBottom: 20,
  },
  infoRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  infoText: {
    fontSize: 14,
    color: '#666666',
    marginLeft: 8,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 12,
  },
  bulletItem: {
    flexDirection: 'row',
    marginBottom: 8,
    paddingRight: 8,
  },
  bullet: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#0077CC',
    marginTop: 6,
    marginRight: 8,
  },
  bulletText: {
    flex: 1,
    fontSize: 16,
    color: '#333333',
    lineHeight: 22,
  },
  loadingContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
  },
  errorContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  errorText: {
    marginTop: 16,
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
    marginBottom: 24,
  },
  retryButton: {
    backgroundColor: '#0077CC',
    borderRadius: 30,
    paddingVertical: 12,
    paddingHorizontal: 24,
  },
  retryButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  footer: {
    flexDirection: 'row',
    padding: 16,
    borderTopWidth: 1,
    borderTopColor: '#EEEEEE',
  },
  shareButton: {
    flex: 1,
    backgroundColor: '#0077CC',
    borderRadius: 30,
    paddingVertical: 12,
    paddingHorizontal: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 8,
  },
  shareButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginLeft: 8,
  },
  doneButton: {
    flex: 1,
    backgroundColor: '#FFFFFF',
    borderRadius: 30,
    paddingVertical: 12,
    paddingHorizontal: 16,
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1,
    borderColor: '#0077CC',
    marginLeft: 8,
  },
  doneButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#0077CC',
  },
});
