# MedTranslate AI Frontend Configuration Script

param (
    [Parameter(Mandatory=$true)]
    [ValidateSet("dev", "test", "prod")]
    [string]$Environment
)

# Configuration
$OutputsFile = Join-Path $PSScriptRoot "outputs-$Environment.json"
$ProviderAppConfigFile = Join-Path $PSScriptRoot "..\frontend\provider-app\src\config\api.js"
$PatientAppConfigFile = Join-Path $PSScriptRoot "..\frontend\patient-app\src\config\api.js"

# Check if outputs file exists
if (-not (Test-Path $OutputsFile)) {
    Write-Host "Outputs file not found: $OutputsFile" -ForegroundColor Red
    Write-Host "Please run deploy.ps1 first to generate the outputs file." -ForegroundColor Red
    exit 1
}

# Load outputs
$outputs = Get-Content $OutputsFile | ConvertFrom-Json
$apiEndpoint = ($outputs | Where-Object { $_.OutputKey -eq "ApiEndpoint" }).OutputValue
$webSocketEndpoint = ($outputs | Where-Object { $_.OutputKey -eq "WebSocketEndpoint" }).OutputValue

if (-not $apiEndpoint -or -not $webSocketEndpoint) {
    Write-Host "API endpoint or WebSocket endpoint not found in outputs file." -ForegroundColor Red
    exit 1
}

Write-Host "Configuring frontend applications for $Environment environment..." -ForegroundColor Cyan
Write-Host "API Endpoint: $apiEndpoint" -ForegroundColor Green
Write-Host "WebSocket Endpoint: $webSocketEndpoint" -ForegroundColor Green

# Create provider app config
$providerAppConfig = @"
/**
 * API Configuration for MedTranslate AI Provider Application
 * 
 * This file is auto-generated by the configure-frontend.ps1 script.
 * Do not edit manually.
 * 
 * Environment: $Environment
 * Generated: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
 */

// API base URL
export const API_BASE_URL = '$apiEndpoint';

// WebSocket base URL
export const WS_BASE_URL = '$webSocketEndpoint';

// API endpoints
export const API_ENDPOINTS = {
  // Auth endpoints
  AUTH: {
    LOGIN: `\${API_BASE_URL}/auth/login`,
  },
  
  // Session endpoints
  SESSIONS: {
    CREATE: `\${API_BASE_URL}/sessions`,
    JOIN: `\${API_BASE_URL}/sessions/join`,
    PATIENT_TOKEN: `\${API_BASE_URL}/sessions/patient-token`,
    END: (sessionId) => `\${API_BASE_URL}/sessions/\${sessionId}/end`,
    GET: (sessionId) => `\${API_BASE_URL}/sessions/\${sessionId}`,
  },
  
  // Translation endpoints
  TRANSLATE: {
    TEXT: `\${API_BASE_URL}/translate/text`,
    AUDIO: `\${API_BASE_URL}/translate/audio`,
  },
  
  // Storage endpoints
  STORAGE: {
    TRANSCRIPT: `\${API_BASE_URL}/storage/transcript`,
    SESSIONS: (sessionId) => `\${API_BASE_URL}/storage/sessions/\${sessionId}`,
  },
  
  // WebSocket endpoint
  WEBSOCKET: (sessionId, token) => `\${WS_BASE_URL}/\${sessionId}?token=\${encodeURIComponent(token)}`,
};

// Helper function for API requests
export async function apiRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || `API request failed with status \${response.status}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('API request error:', error);
    throw error;
  }
}
"@

# Create patient app config
$patientAppConfig = @"
/**
 * API Configuration for MedTranslate AI Patient Application
 * 
 * This file is auto-generated by the configure-frontend.ps1 script.
 * Do not edit manually.
 * 
 * Environment: $Environment
 * Generated: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
 */

// API base URL
export const API_BASE_URL = '$apiEndpoint';

// WebSocket base URL
export const WS_BASE_URL = '$webSocketEndpoint';

// API endpoints
export const API_ENDPOINTS = {
  // Session endpoints
  SESSIONS: {
    JOIN: `\${API_BASE_URL}/sessions/join`,
  },
  
  // Translation endpoints
  TRANSLATE: {
    TEXT: `\${API_BASE_URL}/translate/text`,
    AUDIO: `\${API_BASE_URL}/translate/audio`,
  },
  
  // WebSocket endpoint
  WEBSOCKET: (sessionId, token) => `\${WS_BASE_URL}/\${sessionId}?token=\${encodeURIComponent(token)}`,
};

// Helper function for API requests
export async function apiRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || `API request failed with status \${response.status}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('API request error:', error);
    throw error;
  }
}
"@

# Create directories if they don't exist
$providerAppConfigDir = Split-Path $ProviderAppConfigFile -Parent
$patientAppConfigDir = Split-Path $PatientAppConfigFile -Parent

if (-not (Test-Path $providerAppConfigDir)) {
    New-Item -ItemType Directory -Path $providerAppConfigDir -Force | Out-Null
}

if (-not (Test-Path $patientAppConfigDir)) {
    New-Item -ItemType Directory -Path $patientAppConfigDir -Force | Out-Null
}

# Write config files
Set-Content -Path $ProviderAppConfigFile -Value $providerAppConfig
Set-Content -Path $PatientAppConfigFile -Value $patientAppConfig

Write-Host "Frontend applications configured successfully!" -ForegroundColor Green
Write-Host "Provider app config: $ProviderAppConfigFile" -ForegroundColor Yellow
Write-Host "Patient app config: $PatientAppConfigFile" -ForegroundColor Yellow
