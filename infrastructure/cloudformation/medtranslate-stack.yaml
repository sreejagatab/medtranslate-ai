AWSTemplateFormatVersion: '2010-09-09'
Description: 'MedTranslate AI - Medical Translation System'

Parameters:
  Environment:
    Description: Deployment environment
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    
  ApiDomainName:
    Description: Domain name for the API (leave blank to use API Gateway default)
    Type: String
    Default: ''
    
  CertificateArn:
    Description: ARN of the SSL certificate for the API domain (required if ApiDomainName is provided)
    Type: String
    Default: ''
    
  RetentionPeriodDays:
    Description: Number of days to retain medical data
    Type: Number
    Default: 30
    MinValue: 1
    MaxValue: 365

Conditions:
  UseCustomDomain: !Not [!Equals [!Ref ApiDomainName, '']]
  IsProduction: !Equals [!Ref Environment, 'prod']

Resources:
  # DynamoDB Tables
  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'MedTranslate-Sessions-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
        - AttributeName: providerId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ProviderIndex
          KeySchema:
            - AttributeName: providerId
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: expirationTime
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProduction, true, false]
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: MedTranslateAI

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'MedTranslate-Users-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProduction, true, false]
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: MedTranslateAI

  # S3 Buckets
  SecureStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'medtranslate-secure-storage-${Environment}-${AWS::AccountId}'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: ExpirationRule
            Status: Enabled
            ExpirationInDays: !Ref RetentionPeriodDays
      VersioningConfiguration:
        Status: !If [IsProduction, Enabled, Suspended]
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: MedTranslateAI

  ModelsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'medtranslate-models-${Environment}-${AWS::AccountId}'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: MedTranslateAI

  # IAM Roles
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'MedTranslate-Lambda-Role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: MedTranslatePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt SessionsTable.Arn
                  - !GetAtt UsersTable.Arn
                  - !Sub '${SessionsTable.Arn}/index/*'
                  - !Sub '${UsersTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${SecureStorageBucket.Arn}'
                  - !Sub '${SecureStorageBucket.Arn}/*'
                  - !Sub '${ModelsBucket.Arn}'
                  - !Sub '${ModelsBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*'

  # Lambda Functions
  AuthFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'MedTranslate-Auth-${Environment}'
      Handler: lambda/auth/handler.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          USERS_TABLE: !Ref UsersTable
          SESSIONS_TABLE: !Ref SessionsTable
          JWT_SECRET: !Sub '{{resolve:secretsmanager:MedTranslate-${Environment}:SecretString:JwtSecret}}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: MedTranslateAI

  TranslationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'MedTranslate-Translation-${Environment}'
      Handler: lambda/translation/handler.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          SESSIONS_TABLE: !Ref SessionsTable
          MODELS_BUCKET: !Ref ModelsBucket
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: MedTranslateAI

  StorageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'MedTranslate-Storage-${Environment}'
      Handler: lambda/storage/handler.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          SECURE_STORAGE_BUCKET: !Ref SecureStorageBucket
          RETENTION_PERIOD_DAYS: !Ref RetentionPeriodDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: MedTranslateAI

  WebSocketConnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'MedTranslate-WebSocket-Connect-${Environment}'
      Handler: lambda/websocket/connect.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          SESSIONS_TABLE: !Ref SessionsTable
          JWT_SECRET: !Sub '{{resolve:secretsmanager:MedTranslate-${Environment}:SecretString:JwtSecret}}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: MedTranslateAI

  WebSocketDisconnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'MedTranslate-WebSocket-Disconnect-${Environment}'
      Handler: lambda/websocket/disconnect.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          SESSIONS_TABLE: !Ref SessionsTable
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: MedTranslateAI

  WebSocketMessageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'MedTranslate-WebSocket-Message-${Environment}'
      Handler: lambda/websocket/message.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          SESSIONS_TABLE: !Ref SessionsTable
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: MedTranslateAI

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'MedTranslate-API-${Environment}'
      Description: 'MedTranslate AI API Gateway'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: MedTranslateAI

  # WebSocket API
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'MedTranslate-WebSocket-${Environment}'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: '$request.body.action'
      Tags:
        Environment: !Ref Environment
        Application: MedTranslateAI

  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref WebSocketConnectIntegration

  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations'

  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref WebSocketDisconnectIntegration

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations'

  WebSocketDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref WebSocketMessageIntegration

  WebSocketMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketMessageFunction.Arn}/invocations'

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - WebSocketConnectRoute
      - WebSocketDisconnectRoute
      - WebSocketDefaultRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref WebSocketDeployment
      StageName: !Ref Environment
      DefaultRouteSettings:
        ThrottlingBurstLimit: 100
        ThrottlingRateLimit: 50

  # Lambda Permissions
  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/$connect'

  WebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/$disconnect'

  WebSocketMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketMessageFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/$default'

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    
  WebSocketEndpoint:
    Description: WebSocket API endpoint URL
    Value: !Sub 'wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    
  SecureStorageBucketName:
    Description: Name of the secure storage S3 bucket
    Value: !Ref SecureStorageBucket
    
  ModelsBucketName:
    Description: Name of the models S3 bucket
    Value: !Ref ModelsBucket
    
  SessionsTableName:
    Description: Name of the DynamoDB sessions table
    Value: !Ref SessionsTable
    
  UsersTableName:
    Description: Name of the DynamoDB users table
    Value: !Ref UsersTable
